/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Marketplace {
  export type NftStruct = {
    tokenId: BigNumberish;
    metadataUri: string;
    owner: string;
    price: BigNumberish;
  };

  export type NftStructOutput = [BigNumber, string, string, BigNumber] & {
    tokenId: BigNumber;
    metadataUri: string;
    owner: string;
    price: BigNumber;
  };

  export type NftCollectionStruct = {
    name: string;
    symbol: string;
    description: string;
    author: string;
    nftContractAddr: string;
    nftsInCollection: Marketplace.NftStruct[];
  };

  export type NftCollectionStructOutput = [
    string,
    string,
    string,
    string,
    string,
    Marketplace.NftStructOutput[]
  ] & {
    name: string;
    symbol: string;
    description: string;
    author: string;
    nftContractAddr: string;
    nftsInCollection: Marketplace.NftStructOutput[];
  };
}

export interface MarketplaceInterface extends utils.Interface {
  contractName: "Marketplace";
  functions: {
    "createNftContract(string,string,string)": FunctionFragment;
    "getAllNftCollections()": FunctionFragment;
    "getNftCollectionsWhereTokensOnSale()": FunctionFragment;
    "getNftsCollectionsAuthored()": FunctionFragment;
    "getNftsCollectionsWhereOwnerOwnsTokens()": FunctionFragment;
    "nftContractImplementation()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "woofyContractAddr()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createNftContract",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNftCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftCollectionsWhereTokensOnSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftsCollectionsAuthored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftsCollectionsWhereOwnerOwnsTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftContractImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "woofyContractAddr",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createNftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNftCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftCollectionsWhereTokensOnSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftsCollectionsAuthored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftsCollectionsWhereOwnerOwnsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContractImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "woofyContractAddr",
    data: BytesLike
  ): Result;

  events: {
    "CommissionReceivedByMarketplace(uint256)": EventFragment;
    "NftBought(address,uint256,address,uint256)": EventFragment;
    "NftContractCreated(address,address)": EventFragment;
    "NftMinted(address,uint256,address,string)": EventFragment;
    "NftOnSale(address,uint256,uint256)": EventFragment;
    "NftSaleCancel(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CommissionReceivedByMarketplace"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftOnSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftSaleCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type CommissionReceivedByMarketplaceEvent = TypedEvent<
  [BigNumber],
  { commission: BigNumber }
>;

export type CommissionReceivedByMarketplaceEventFilter =
  TypedEventFilter<CommissionReceivedByMarketplaceEvent>;

export type NftBoughtEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  {
    nftContractAddress: string;
    tokenId: BigNumber;
    boughtBy: string;
    price: BigNumber;
  }
>;

export type NftBoughtEventFilter = TypedEventFilter<NftBoughtEvent>;

export type NftContractCreatedEvent = TypedEvent<
  [string, string],
  { contractAddr: string; author: string }
>;

export type NftContractCreatedEventFilter =
  TypedEventFilter<NftContractCreatedEvent>;

export type NftMintedEvent = TypedEvent<
  [string, BigNumber, string, string],
  {
    nftContractAddress: string;
    tokenId: BigNumber;
    mintedTo: string;
    tokenUri: string;
  }
>;

export type NftMintedEventFilter = TypedEventFilter<NftMintedEvent>;

export type NftOnSaleEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { nftContractAddress: string; tokenId: BigNumber; price: BigNumber }
>;

export type NftOnSaleEventFilter = TypedEventFilter<NftOnSaleEvent>;

export type NftSaleCancelEvent = TypedEvent<
  [string, BigNumber],
  { nftContractAddress: string; tokenId: BigNumber }
>;

export type NftSaleCancelEventFilter = TypedEventFilter<NftSaleCancelEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Marketplace extends BaseContract {
  contractName: "Marketplace";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createNftContract(
      _name: string,
      _symbol: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllNftCollections(
      overrides?: CallOverrides
    ): Promise<[Marketplace.NftCollectionStructOutput[]]>;

    getNftCollectionsWhereTokensOnSale(
      overrides?: CallOverrides
    ): Promise<[Marketplace.NftCollectionStructOutput[]]>;

    getNftsCollectionsAuthored(
      overrides?: CallOverrides
    ): Promise<[Marketplace.NftCollectionStructOutput[]]>;

    getNftsCollectionsWhereOwnerOwnsTokens(
      overrides?: CallOverrides
    ): Promise<[Marketplace.NftCollectionStructOutput[]]>;

    nftContractImplementation(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    woofyContractAddr(overrides?: CallOverrides): Promise<[string]>;
  };

  createNftContract(
    _name: string,
    _symbol: string,
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllNftCollections(
    overrides?: CallOverrides
  ): Promise<Marketplace.NftCollectionStructOutput[]>;

  getNftCollectionsWhereTokensOnSale(
    overrides?: CallOverrides
  ): Promise<Marketplace.NftCollectionStructOutput[]>;

  getNftsCollectionsAuthored(
    overrides?: CallOverrides
  ): Promise<Marketplace.NftCollectionStructOutput[]>;

  getNftsCollectionsWhereOwnerOwnsTokens(
    overrides?: CallOverrides
  ): Promise<Marketplace.NftCollectionStructOutput[]>;

  nftContractImplementation(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  woofyContractAddr(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createNftContract(
      _name: string,
      _symbol: string,
      _description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllNftCollections(
      overrides?: CallOverrides
    ): Promise<Marketplace.NftCollectionStructOutput[]>;

    getNftCollectionsWhereTokensOnSale(
      overrides?: CallOverrides
    ): Promise<Marketplace.NftCollectionStructOutput[]>;

    getNftsCollectionsAuthored(
      overrides?: CallOverrides
    ): Promise<Marketplace.NftCollectionStructOutput[]>;

    getNftsCollectionsWhereOwnerOwnsTokens(
      overrides?: CallOverrides
    ): Promise<Marketplace.NftCollectionStructOutput[]>;

    nftContractImplementation(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    woofyContractAddr(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CommissionReceivedByMarketplace(uint256)"(
      commission?: null
    ): CommissionReceivedByMarketplaceEventFilter;
    CommissionReceivedByMarketplace(
      commission?: null
    ): CommissionReceivedByMarketplaceEventFilter;

    "NftBought(address,uint256,address,uint256)"(
      nftContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      boughtBy?: null,
      price?: null
    ): NftBoughtEventFilter;
    NftBought(
      nftContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      boughtBy?: null,
      price?: null
    ): NftBoughtEventFilter;

    "NftContractCreated(address,address)"(
      contractAddr?: string | null,
      author?: string | null
    ): NftContractCreatedEventFilter;
    NftContractCreated(
      contractAddr?: string | null,
      author?: string | null
    ): NftContractCreatedEventFilter;

    "NftMinted(address,uint256,address,string)"(
      nftContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      mintedTo?: string | null,
      tokenUri?: null
    ): NftMintedEventFilter;
    NftMinted(
      nftContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      mintedTo?: string | null,
      tokenUri?: null
    ): NftMintedEventFilter;

    "NftOnSale(address,uint256,uint256)"(
      nftContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): NftOnSaleEventFilter;
    NftOnSale(
      nftContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): NftOnSaleEventFilter;

    "NftSaleCancel(address,uint256)"(
      nftContractAddress?: string | null,
      tokenId?: BigNumberish | null
    ): NftSaleCancelEventFilter;
    NftSaleCancel(
      nftContractAddress?: string | null,
      tokenId?: BigNumberish | null
    ): NftSaleCancelEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    createNftContract(
      _name: string,
      _symbol: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllNftCollections(overrides?: CallOverrides): Promise<BigNumber>;

    getNftCollectionsWhereTokensOnSale(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftsCollectionsAuthored(overrides?: CallOverrides): Promise<BigNumber>;

    getNftsCollectionsWhereOwnerOwnsTokens(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftContractImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    woofyContractAddr(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createNftContract(
      _name: string,
      _symbol: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllNftCollections(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftCollectionsWhereTokensOnSale(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftsCollectionsAuthored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftsCollectionsWhereOwnerOwnsTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftContractImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    woofyContractAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
